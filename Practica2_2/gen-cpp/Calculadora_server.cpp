// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Calculadora.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::calculadora;

class CalculadoraHandler : virtual public CalculadoraIf {
 public:
  CalculadoraHandler() {
    // Your initialization goes here
  }

  double suma(const parametros& params) {
    // Your implementation goes here
    double result = params.param_1 + params.param_2;
    printf("%f + %f = %f\n", params.param_1, params.param_2, result);

    return result;
  }

  double mul(const parametros& params) {
    // Your implementation goes here
    double result = params.param_1 * params.param_2;
    printf("%f * %f = %f\n", params.param_1, params.param_2, result);

    return result;
  }

  double div(const parametros& params) {
    // Your implementation goes here
    double result = params.param_1 / params.param_2;
    printf("%f / %f = %f\n", params.param_1, params.param_2, result);

    return result;
  }

  double res(const parametros& params) {
    // Your implementation goes here
    double result = params.param_1 - params.param_2;
    printf("%f - %f = %f\n", params.param_1, params.param_2, result);

    return result;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CalculadoraHandler> handler(new CalculadoraHandler());
  ::std::shared_ptr<TProcessor> processor(new CalculadoraProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
