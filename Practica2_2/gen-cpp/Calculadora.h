/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculadora_H
#define Calculadora_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "calculadora_types.h"

namespace calculadora {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalculadoraIf {
 public:
  virtual ~CalculadoraIf() {}
  virtual double suma(const parametros& params) = 0;
  virtual double mul(const parametros& params) = 0;
  virtual double div(const parametros& params) = 0;
  virtual double res(const parametros& params) = 0;
};

class CalculadoraIfFactory {
 public:
  typedef CalculadoraIf Handler;

  virtual ~CalculadoraIfFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculadoraIf* /* handler */) = 0;
};

class CalculadoraIfSingletonFactory : virtual public CalculadoraIfFactory {
 public:
  CalculadoraIfSingletonFactory(const ::std::shared_ptr<CalculadoraIf>& iface) : iface_(iface) {}
  virtual ~CalculadoraIfSingletonFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculadoraIf* /* handler */) {}

 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
};

class CalculadoraNull : virtual public CalculadoraIf {
 public:
  virtual ~CalculadoraNull() {}
  double suma(const parametros& /* params */) {
    double _return = (double)0;
    return _return;
  }
  double mul(const parametros& /* params */) {
    double _return = (double)0;
    return _return;
  }
  double div(const parametros& /* params */) {
    double _return = (double)0;
    return _return;
  }
  double res(const parametros& /* params */) {
    double _return = (double)0;
    return _return;
  }
};

typedef struct _Calculadora_suma_args__isset {
  _Calculadora_suma_args__isset() : params(false) {}
  bool params :1;
} _Calculadora_suma_args__isset;

class Calculadora_suma_args {
 public:

  Calculadora_suma_args(const Calculadora_suma_args&);
  Calculadora_suma_args& operator=(const Calculadora_suma_args&);
  Calculadora_suma_args() {
  }

  virtual ~Calculadora_suma_args() noexcept;
  parametros params;

  _Calculadora_suma_args__isset __isset;

  void __set_params(const parametros& val);

  bool operator == (const Calculadora_suma_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_suma_pargs {
 public:


  virtual ~Calculadora_suma_pargs() noexcept;
  const parametros* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_result__isset {
  _Calculadora_suma_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_result__isset;

class Calculadora_suma_result {
 public:

  Calculadora_suma_result(const Calculadora_suma_result&);
  Calculadora_suma_result& operator=(const Calculadora_suma_result&);
  Calculadora_suma_result() : success(0) {
  }

  virtual ~Calculadora_suma_result() noexcept;
  double success;

  _Calculadora_suma_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_suma_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_presult__isset {
  _Calculadora_suma_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_presult__isset;

class Calculadora_suma_presult {
 public:


  virtual ~Calculadora_suma_presult() noexcept;
  double* success;

  _Calculadora_suma_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_mul_args__isset {
  _Calculadora_mul_args__isset() : params(false) {}
  bool params :1;
} _Calculadora_mul_args__isset;

class Calculadora_mul_args {
 public:

  Calculadora_mul_args(const Calculadora_mul_args&);
  Calculadora_mul_args& operator=(const Calculadora_mul_args&);
  Calculadora_mul_args() {
  }

  virtual ~Calculadora_mul_args() noexcept;
  parametros params;

  _Calculadora_mul_args__isset __isset;

  void __set_params(const parametros& val);

  bool operator == (const Calculadora_mul_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Calculadora_mul_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_mul_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_mul_pargs {
 public:


  virtual ~Calculadora_mul_pargs() noexcept;
  const parametros* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_mul_result__isset {
  _Calculadora_mul_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_mul_result__isset;

class Calculadora_mul_result {
 public:

  Calculadora_mul_result(const Calculadora_mul_result&);
  Calculadora_mul_result& operator=(const Calculadora_mul_result&);
  Calculadora_mul_result() : success(0) {
  }

  virtual ~Calculadora_mul_result() noexcept;
  double success;

  _Calculadora_mul_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_mul_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_mul_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_mul_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_mul_presult__isset {
  _Calculadora_mul_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_mul_presult__isset;

class Calculadora_mul_presult {
 public:


  virtual ~Calculadora_mul_presult() noexcept;
  double* success;

  _Calculadora_mul_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_div_args__isset {
  _Calculadora_div_args__isset() : params(false) {}
  bool params :1;
} _Calculadora_div_args__isset;

class Calculadora_div_args {
 public:

  Calculadora_div_args(const Calculadora_div_args&);
  Calculadora_div_args& operator=(const Calculadora_div_args&);
  Calculadora_div_args() {
  }

  virtual ~Calculadora_div_args() noexcept;
  parametros params;

  _Calculadora_div_args__isset __isset;

  void __set_params(const parametros& val);

  bool operator == (const Calculadora_div_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Calculadora_div_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_div_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_div_pargs {
 public:


  virtual ~Calculadora_div_pargs() noexcept;
  const parametros* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_div_result__isset {
  _Calculadora_div_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_div_result__isset;

class Calculadora_div_result {
 public:

  Calculadora_div_result(const Calculadora_div_result&);
  Calculadora_div_result& operator=(const Calculadora_div_result&);
  Calculadora_div_result() : success(0) {
  }

  virtual ~Calculadora_div_result() noexcept;
  double success;

  _Calculadora_div_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_div_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_div_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_div_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_div_presult__isset {
  _Calculadora_div_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_div_presult__isset;

class Calculadora_div_presult {
 public:


  virtual ~Calculadora_div_presult() noexcept;
  double* success;

  _Calculadora_div_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_res_args__isset {
  _Calculadora_res_args__isset() : params(false) {}
  bool params :1;
} _Calculadora_res_args__isset;

class Calculadora_res_args {
 public:

  Calculadora_res_args(const Calculadora_res_args&);
  Calculadora_res_args& operator=(const Calculadora_res_args&);
  Calculadora_res_args() {
  }

  virtual ~Calculadora_res_args() noexcept;
  parametros params;

  _Calculadora_res_args__isset __isset;

  void __set_params(const parametros& val);

  bool operator == (const Calculadora_res_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Calculadora_res_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_res_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_res_pargs {
 public:


  virtual ~Calculadora_res_pargs() noexcept;
  const parametros* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_res_result__isset {
  _Calculadora_res_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_res_result__isset;

class Calculadora_res_result {
 public:

  Calculadora_res_result(const Calculadora_res_result&);
  Calculadora_res_result& operator=(const Calculadora_res_result&);
  Calculadora_res_result() : success(0) {
  }

  virtual ~Calculadora_res_result() noexcept;
  double success;

  _Calculadora_res_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_res_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_res_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_res_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_res_presult__isset {
  _Calculadora_res_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_res_presult__isset;

class Calculadora_res_presult {
 public:


  virtual ~Calculadora_res_presult() noexcept;
  double* success;

  _Calculadora_res_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculadoraClient : virtual public CalculadoraIf {
 public:
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double suma(const parametros& params);
  void send_suma(const parametros& params);
  double recv_suma();
  double mul(const parametros& params);
  void send_mul(const parametros& params);
  double recv_mul();
  double div(const parametros& params);
  void send_div(const parametros& params);
  double recv_div();
  double res(const parametros& params);
  void send_res(const parametros& params);
  double recv_res();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculadoraProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculadoraProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_suma(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mul(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_div(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_res(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculadoraProcessor(::std::shared_ptr<CalculadoraIf> iface) :
    iface_(iface) {
    processMap_["suma"] = &CalculadoraProcessor::process_suma;
    processMap_["mul"] = &CalculadoraProcessor::process_mul;
    processMap_["div"] = &CalculadoraProcessor::process_div;
    processMap_["res"] = &CalculadoraProcessor::process_res;
  }

  virtual ~CalculadoraProcessor() {}
};

class CalculadoraProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculadoraProcessorFactory(const ::std::shared_ptr< CalculadoraIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< CalculadoraIfFactory > handlerFactory_;
};

class CalculadoraMultiface : virtual public CalculadoraIf {
 public:
  CalculadoraMultiface(std::vector<std::shared_ptr<CalculadoraIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculadoraMultiface() {}
 protected:
  std::vector<std::shared_ptr<CalculadoraIf> > ifaces_;
  CalculadoraMultiface() {}
  void add(::std::shared_ptr<CalculadoraIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double suma(const parametros& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->suma(params);
    }
    return ifaces_[i]->suma(params);
  }

  double mul(const parametros& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mul(params);
    }
    return ifaces_[i]->mul(params);
  }

  double div(const parametros& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->div(params);
    }
    return ifaces_[i]->div(params);
  }

  double res(const parametros& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->res(params);
    }
    return ifaces_[i]->res(params);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculadoraConcurrentClient : virtual public CalculadoraIf {
 public:
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double suma(const parametros& params);
  int32_t send_suma(const parametros& params);
  double recv_suma(const int32_t seqid);
  double mul(const parametros& params);
  int32_t send_mul(const parametros& params);
  double recv_mul(const int32_t seqid);
  double div(const parametros& params);
  int32_t send_div(const parametros& params);
  double recv_div(const int32_t seqid);
  double res(const parametros& params);
  int32_t send_res(const parametros& params);
  double recv_res(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
