/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef calculadora_TYPES_H
#define calculadora_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace calculadora {

class parametros;

typedef struct _parametros__isset {
  _parametros__isset() : param_1(false), param_2(false) {}
  bool param_1 :1;
  bool param_2 :1;
} _parametros__isset;

class parametros : public virtual ::apache::thrift::TBase {
 public:

  parametros(const parametros&);
  parametros& operator=(const parametros&);
  parametros() : param_1(0), param_2(0) {
  }

  virtual ~parametros() noexcept;
  double param_1;
  double param_2;

  _parametros__isset __isset;

  void __set_param_1(const double val);

  void __set_param_2(const double val);

  bool operator == (const parametros & rhs) const
  {
    if (!(param_1 == rhs.param_1))
      return false;
    if (!(param_2 == rhs.param_2))
      return false;
    return true;
  }
  bool operator != (const parametros &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const parametros & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(parametros &a, parametros &b);

std::ostream& operator<<(std::ostream& out, const parametros& obj);

} // namespace

#endif
