/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "calculadora_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace calculadora {


parametros::~parametros() noexcept {
}


void parametros::__set_param_1(const double val) {
  this->param_1 = val;
}

void parametros::__set_param_2(const double val) {
  this->param_2 = val;
}
std::ostream& operator<<(std::ostream& out, const parametros& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t parametros::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param_1);
          this->__isset.param_1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->param_2);
          this->__isset.param_2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t parametros::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("parametros");

  xfer += oprot->writeFieldBegin("param_1", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->param_1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_2", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->param_2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(parametros &a, parametros &b) {
  using ::std::swap;
  swap(a.param_1, b.param_1);
  swap(a.param_2, b.param_2);
  swap(a.__isset, b.__isset);
}

parametros::parametros(const parametros& other0) {
  param_1 = other0.param_1;
  param_2 = other0.param_2;
  __isset = other0.__isset;
}
parametros& parametros::operator=(const parametros& other1) {
  param_1 = other1.param_1;
  param_2 = other1.param_2;
  __isset = other1.__isset;
  return *this;
}
void parametros::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "parametros(";
  out << "param_1=" << to_string(param_1);
  out << ", " << "param_2=" << to_string(param_2);
  out << ")";
}

} // namespace
